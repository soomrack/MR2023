#include <iostream>
#include<cstring>
#include <string>

#define ARR_SIZE 10
typedef int arr_type;

void bubble_sort(arr_type* arr, size_t size)
{
    for (size_t i = 0; i < size - 1; i++) {
        for (size_t j = size - 1; i < j; j--) {
            if (arr[j] < arr[j - 1])
                std::swap(arr[j], arr[j - 1]);
        }
    }
}


void merge_inside(arr_type* mas_arr, arr_type* tmp_arr, size_t size)
{
    size_t middle = size / 2;

    if (size < 2) {
        return;
    }

    merge_inside(tmp_arr, mas_arr, middle);
    merge_inside(tmp_arr + middle, mas_arr + middle, size - middle);

    for (size_t idx = 0, left_limb = 0, right_limb = middle; idx < size; idx++) {
        if (right_limb >= size) tmp_arr[idx] = mas_arr[left_limb++];
        else if (left_limb >= middle) tmp_arr[idx] = mas_arr[right_limb++];
        else if (mas_arr[left_limb] <= mas_arr[right_limb]) tmp_arr[idx] = mas_arr[left_limb++];
        else tmp_arr[idx] = mas_arr[right_limb++];
    }

}


void merge_sort(arr_type* mas_arr, size_t size)
{
    arr_type* tmp_arr = new int[ARR_SIZE];
    memcpy(tmp_arr, mas_arr, sizeof(arr_type) * size);
    merge_inside(tmp_arr, mas_arr, size);
    delete[] tmp_arr;
}


void print(int* m, int n)
{
    for (int i = 0; i < n; i++) {
        std::cout << m[i] << " ";
    }

    std::cout << std::endl;
}


int main()
{
    int n;

    n = 10;
    int arr[ARR_SIZE] = { 1, 3, 33, 3, 50, 5, 7, 6, 2, 7 };
    std::cout << "The source array:" << std::endl;
    print(arr, n);

    //merge_sort(arr, ARR_SIZE);

    bubble_sort(arr, 10);
    std::cout << "Sorted array: " << std::endl;
    print(arr, n);

    return 0;
}
