#include <iostream>

using namespace std;

void bubble_sort(int* arr, int size)
{
	for (size_t i = 0; i + 1 < size; ++i) {
		for (size_t j = 0; j + 1 < size - i; ++j) {
			if (arr[j + 1] < arr[j]) {
				swap(arr[j], arr[j + 1]);
			}
		}
	}
}

void insertion_sort(int* arr, int size)
{
	for (size_t i = 1; i < size; ++i) {
		for (size_t j = i; j > 0; --j) {
			if (arr[j] < arr[j - 1]) {
				swap(arr[j], arr[j - 1]);
			}
			else break;
		}
	}

}

void heapify(int* arr, int size, int i) {
	int largest = i;
	int left = 2 * i + 1;
	int right = 2 * i + 2;

	if (left < size && arr[left] > arr[largest]) {
		largest = left;
	}

	if (right < size && arr[right] > arr[largest]) {
		largest = right;
	}

	if (largest != i) {
		swap(arr[largest], arr[i]);
		heapify(arr, size, largest);
	}
}

void heap_sort(int* arr, int size)
{
	for (int i = size / 2 - 1; i >= 0; --i) {
		heapify(arr, size, i);
	}

	for (int i = size - 1; i > 0; --i) {
		swap(arr[0], arr[i]);
		heapify(arr, i, 0);
	}
}

void merge_sort_recursion(int* arr, int left, int right) {
	if (left < right) {
		int m = (left + right) / 2;

		merge_sort_recursion(arr, left, m);
		merge_sort_recursion(arr, m + 1, right);

		merge_sorted_arr(arr, left, right, m);
	}
}

void merge_sorted_arr(int* arr, int left, int right, int m) {
	int left_size = m - left + 1;
	int right_size = m - right;

	int temp_left[left_size];
	int temp_right[right_size];

	int i, j, k;

	for (int i = 0; i < left_size; i++)
		temp_left[i] = arr[left + i];

	for (int i = 0; i < right_size; i++)
		temp_right[i] = arr[m + 1 + i];

	for (i = 0, j = 0, k = left, k <= right, k++) {
		if ((i < left_size) && ((j >= right_size)
			|| temp_left[i] <= temp_right[j])) {

			arr[k] = temp_left[i];
			i++;
		}
		else {
			arr[k] = temp_right[j];
			j++;
		}
	}
}

void merge_sort(int* arr, int size) {
	merge_sort_recursion(arr, 0, size - 1);
}

void print_arr(int* arr, int size) {
	for (size_t i = 0; i < size; ++i)
		cout << arr[i] << " ";
	cout << endl;
}

int main() {
	int arr[] = { 3, 9, 8, 1, 4, 2 };
	int size = 6;

	bubble_sort(arr, size);
	print_arr(arr, size);

	insertion_sort(arr, size);
	print_arr(arr, size);

	heap_sort(arr, size);
	print_arr(arr, size);

	merge_sort(arr, size);
	print_arr(arr, size);
	return 0;
}
