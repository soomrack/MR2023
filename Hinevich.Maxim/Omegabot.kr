#include <NewPing.h>

// Define pin numbers for ultrasonic sensors
#define TRIGGER_PIN_FRONT 9
#define ECHO_PIN_FRONT 10
#define TRIGGER_PIN_LEFT 11
#define ECHO_PIN_LEFT 12

// Define constants for robot movement
#define MOTOR_LEFT_FORWARD 3
#define MOTOR_LEFT_BACKWARD 4
#define MOTOR_RIGHT_FORWARD 5
#define MOTOR_RIGHT_BACKWARD 6

// Define distance thresholds (in centimeters)
#define WALL_DISTANCE 15
#define FRONT_DISTANCE 20

// Initialize ultrasonic sensors
NewPing sonarFront(TRIGGER_PIN_FRONT, ECHO_PIN_FRONT, 200);
NewPing sonarLeft(TRIGGER_PIN_LEFT, ECHO_PIN_LEFT, 200);

void setup() {
  // Set motor pins as outputs
  pinMode(MOTOR_LEFT_FORWARD, OUTPUT);
  pinMode(MOTOR_LEFT_BACKWARD, OUTPUT);
  pinMode(MOTOR_RIGHT_FORWARD, OUTPUT);
  pinMode(MOTOR_RIGHT_BACKWARD, OUTPUT);

  // Initialize serial communication for debugging
  Serial.begin(9600);
}

void loop() {
  // Read distances from ultrasonic sensors
  int distanceFront = sonarFront.ping_cm();
  int distanceLeft = sonarLeft.ping_cm();

  // Debugging output
  Serial.print("Front: ");
  Serial.print(distanceFront);
  Serial.print(" cm, Left: ");
  Serial.println(distanceLeft);

  // Decision making based on sensor readings
  if (distanceFront > FRONT_DISTANCE) {
    // No wall in front, move forward
    moveForward();
  } else {
    // Wall in front, check left sensor
    if (distanceLeft > WALL_DISTANCE) {
      // No wall on the left, turn left
      turnLeft();
    } else {
      // Wall on the left, turn right
      turnRight();
    }
  }

  // Small delay to allow sensor readings to stabilize
  delay(100);
}

void moveForward() {
  digitalWrite(MOTOR_LEFT_FORWARD, HIGH);
  digitalWrite(MOTOR_LEFT_BACKWARD, LOW);
  digitalWrite(MOTOR_RIGHT_FORWARD, HIGH);
  digitalWrite(MOTOR_RIGHT_BACKWARD, LOW);
}

void turnLeft() {
  digitalWrite(MOTOR_LEFT_FORWARD, LOW);
  digitalWrite(MOTOR_LEFT_BACKWARD, HIGH);
  digitalWrite(MOTOR_RIGHT_FORWARD, HIGH);
  digitalWrite(MOTOR_RIGHT_BACKWARD, LOW);
  // Adjust delay for a 90-degree turn
  delay(300);
  stopMotors();
}

void turnRight() {
  digitalWrite(MOTOR_LEFT_FORWARD, HIGH);
  digitalWrite(MOTOR_LEFT_BACKWARD, LOW);
  digitalWrite(MOTOR_RIGHT_FORWARD, LOW);
  digitalWrite(MOTOR_RIGHT_BACKWARD, HIGH);
  // Adjust delay for a 90-degree turn
  delay(300);
  stopMotors();
}

void stopMotors() {
  digitalWrite(MOTOR_LEFT_FORWARD, LOW);
  digitalWrite(MOTOR_LEFT_BACKWARD, LOW);
  digitalWrite(MOTOR_RIGHT_FORWARD, LOW);
  digitalWrite(MOTOR_RIGHT_BACKWARD, LOW);
}
